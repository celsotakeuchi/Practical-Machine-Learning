install_from_swirl("Regression Models")
install_from_swirl("Regression Models")
install_from_swirl("Regression Models")
install_from_swirl("Regression Models")
?InstallCourses
?install_course_github
?InstallCourses
install_from_swirl("Statistical Inference")
install_from_swirl("Statistical Inference")
install_from_swirl("Regression Models")
swirl()
swirl()
1-(2+1)/36
deck
1/52
52
4/52
0
12/52
2/51
exit
quit()
x <- c(1,2,3,4,5,6)
x
mean(x)
var(x)
variance(x)
?var
var(x)
swirl
swirl()
swirl()
library(swirl)
swirl()
quit()
x <- c(0.18, -1.54, 0.42, 0.95)
w <- c(2, 1, 3, 1)
rbind(x,w)
suits
values
deal
deck
hand
swirl()
library(swirl)
swirl
swirl()
swirl()
2
swirl()
library(swirl)
swirl()
swirl()
ppois(10, lambda= 5*3)
choose(5,4)
0,5^5
0.5^5
*6
6*0.5^5
swirl()
6
0,6
1.6*0.8/2
0,64
0.64
mypdf
integrate
integrate(mypdf,0,1.6)
o
p
09
x
334
2
1
34
5
6
7
7
234
42432424
3254
42432
35
4645
5
756
453
443
234
35
4
23
123
1
info()
1
1
12
12
23123
234
3447
56876
8
632
21534
543
4324
32
32
4332
432
423
443
242
2
323
243
2432
43434345
435
4
65
42
32
321
422
q
2
1,4
1.4
x^2=4*o.5
x^2=4*0.5
q
quit()
library(downloader)
install.packages("downloader")
library(downloader)
url <- "https://raw.githubusercontent.com/genomicsclass/dagdata/master/inst/extdata/femaleControlsPopulation.csv"
filename <- basename(url)
download(url, destfile=filename)
x <- unlist( read.csv(filename) )
x
dim(x)
x
mean(x)
set.seed(1)
mean(sample(x, 5))
mean(sample(x, 5))
set.seed(1)
mean(sample(x, 5))
mean(sample(x, 5)) - mean(x)
set.seed(5)
mean(sample(x, 5)) - mean(x)
set.seed(1)
mean(sample(x, 5)) - mean(x)
set.seed(5)
mean(sample(x, 5)) - mean(x)
quit()
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
library(lattice)
?segmentationOriginal
names(filename)
names(segmentationOriginal)
str(segmentationOriginal$Case)
train
train <- subset(segmentationOriginal, Case == "1")
names(train)
names(segmentationOriginal)
head(train)
head(train)
train
train <- subset(segmentationOriginal, Case == "1", select = "")
?subset
train <- subset(segmentationOriginal, Case == "1", select = -Case)
train <- subset(segmentationOriginal, Case == 1, select = -Case)
View(segmentationOriginal)
train <- subset(segmentationOriginal, Case == "Train")
View(train)
set.seed(125)
model <- train(Class ~ ., data = train, method = "rpart")
model$finalModel
model
library(rpart)
set.seed(125)
model <- train(Class ~ ., data = train, method = "rpart")
model$finalModel
install.packages(rpart)
install.packages("rpart")
install.packages("rpart")
library(rpart)
library('rpart')
install.packages("rpart")
library(rpart)
set.seed(125)
model <- train(Class ~ ., data = train, method = "rpart")
train <- subset(segmentationOriginal, Case == "Train")
test <- subset(segmentationOriginal, Case == "Test")
set.seed(125)
model <- train(Class ~ ., data = train, method = "rpart")
library(caret)
train <- subset(segmentationOriginal, Case == "Train")
test <- subset(segmentationOriginal, Case == "Test")
set.seed(125)
model <- train(Class ~ ., data = train, method = "rpart")
train <- subset(segmentationOriginal, Case == "Train")
test <- subset(segmentationOriginal, Case == "Test")
set.seed(125)
model <- train(Class ~ ., data = train, method = "rpart")
install.packages("e1071")
library(e1071)
train <- subset(segmentationOriginal, Case == "Train")
test <- subset(segmentationOriginal, Case == "Test")
set.seed(125)
model <- train(Class ~ ., data = train, method = "rpart")
model
model$finalModel
plot(model$finalModel, uniform = TUE)
plot(model$finalModel, uniform = TRUE
)
text(model$finalModel, cex = 0.8)
predict(model, newdata = test)
library(pgmm)
data(olive)
olive = olive[,-1]
install.packages(pgmm)
install.packages("pgmm')
install.packages("pgmm")
data(olive)
library(pgmm)
a <- data(olive)
a = olive[, -1]
a
names(a)
summary(a)
str(a)
new.data <- as.data.frame(t(colMeans(olive)))
new.data
new.data <- as.data.frame(t(colMeans(olive)))
new.data <- as.data.frame(t(colMeans(olive)))
model.olive <- train(Area ~ . , method = "rpart", data = olive)
model.olive$finalModel
pred.olive <- predict(model.olive, data = new.data)
pred.olive
str(pred.olive)
plot(model.olive$finalModel, uniform = TRUE)
text(model.olive$finalModel, cex = 1)
str(olive)
pred.olive <- predict(model.olive, data = new.data)
pred.olive
install.library(ElemStatLearn)
install.packages("ElemStatLearn")
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
names(train)
names(SAheart)
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
set.seed(13234)
model.4 <- train(chd ~ age + alcohol + obesity + tobacco + typea + ldl,
method = "glm", family = "binomial")
pred.4 <- predict(model.4, missClass)
missClass(testSA$chd, predict(modelSA, newdata = testSA))
missClass(trainSA$chd, predict(modelSA, newdata = trainSA))
model.4 <- train(chd ~ age + alcohol + obesity + tobacco + typea + ldl,
method = "glm", family = "binomial", data = SAheart)
missClass(testSA$chd, predict(model.4, newdata = testSA))
missClass(trainSA$chd, predict(model.4, newdata = trainSA))
set.seed(13234)
model.4 <- train(chd ~ age + alcohol + obesity + tobacco + typea + ldl,
method = "glm", family = "binomial", data = SAheart)
missClass(testSA$chd, predict(model.4, newdata = testSA))
missClass(trainSA$chd, predict(model.4, newdata = trainSA))
set.seed(13234)
model.4 <- train(chd ~ age + alcohol + obesity + tobacco + typea + ldl,
method = "glm", family = "binomial", data = trainSA)
missClass(testSA$chd, predict(model.4, newdata = testSA))
missClass(trainSA$chd, predict(model.4, newdata = trainSA))
quit()
library(caret)
setwd("D:/login de rede/Meus documentos/_Celso Takeuchi/__DataScience/Data Science Specializaiton/8 - Practical Machine Learning/Assignment")
## Reading Data
data <- read.csv("pml-training.csv", header = TRUE)
nzv <- nearZeroVar(data, saveMetrics = TRUE)
used_features <- subset(nzv, nzv == "FALSE")
used_features <- row.names(used_features)
used_features
names(datsa)
names(data)
nzv
dim(nzv)
dim(used_features)
used_features
a <- as.data.frame(used_features)
dim(a)
a <- subset(a, select = -"classe")
a <- a[,-100]
a
a <- a[-c(100),]
a <- a[-100,]
str(a)
a <- as.data.frame(a)
a
str(a)
a <- used_features
a
str(a)
a <- as.data.frame(a)
str(a)
a
a <- a[-100,]
a
a <- used_features
a <- a[-100,]
library(caret)
setwd("D:/login de rede/Meus documentos/_Celso Takeuchi/__DataScience/Data Science Specializaiton/8 - Practical Machine Learning/Assignment")
data <- read.csv("pml-training.csv", header = TRUE)
data <- na.omit(data)
data <- read.csv("pml-training.csv", header = TRUE)
nzv <- nearZeroVar(data, saveMetrics = TRUE)
used_features <- subset(nzv, nzv == "FALSE")
dim(used_features)
data <- read.csv("pml-training.csv", header = TRUE, na.strings = c("", "NA", "NULL"))
nzv <- nearZeroVar(data, saveMetrics = TRUE)
used_features <- subset(nzv, nzv == "FALSE")
dim(used_features)
dim(data)
names(data)
remove <- c ("X",
"user_name",
"raw_timestamp_part_1",
"raw_timestamp_part_2",
"cvtd_timestamp",
"new_window",
"num_window")
remove
not_used <- remove
data <- data[, -which(names(data) %in% not_used)
)
data <- data[, -which(names(data) %in% not_used)]
names(data)
rm(remove)
dim(data)
nzv <- nearZeroVar(data, saveMetrics = TRUE)
used_features <- subset(nzv, nzv == "FALSE")
used_features <- row.names(used_features)
used_features <- as.data.frame(used_features)
dim(used_features)
names(used_features)
used_features
p <- data
data <- data[, which(names(data %in% used_features))]
data <- data[, which(names(data) %in% used_features)]
names(data)
data
nzv <- nearZeroVar(data, saveMetrics = TRUE)
not_used_features <- subset(nzv, nzv == "TRUE")
dim(not_used_features)
not_used_features
nzv
not_used_features <- subset(nzv, nzv$nzv == "TRUE")
nzv <- nearZeroVar(data, saveMetrics = TRUE)
nzv
nzv <- nearZeroVar(data, saveMetrics = TRUE)
data
data <- p
data
nzv <- nearZeroVar(data, saveMetrics = TRUE)
nzv
not_used_features <- subset(nzv, nzv == "TRUE")
not_used_features
dim(not_used_features)
str(not_used_features)
used_feat <- subset(nzv, nzv == "TRUE")
used_feat
dim(used_feat)
dim(data)
data <- subset(data, select = rownames(used_feat))
dim(data)
names(data)
data <- p
used_feat <- subset(nzv, nzv == "FALSE")
dim(used_feat)
data <- subset(data, select = rownames(used_feat))
dim(data)
data <- p
nzv <- nearZeroVar(data, saveMetrics = FALSE)
used_feat <- subset(nzv, nzv == "FALSE")
data <- subset(data, select = rownames(used_feat))
data <-p
used_feat
used_feat <- subset(nzv, nzv == "FALSE")
used_feat
used_feat <- subset(nzv, nzv == "TRUE")
used_feat
nzv <- nearZeroVar(data, saveMetrics = FALSE)
nzv
nzv <- nearZeroVar(data, saveMetrics = TRUE)
used_feat <- subset(nzv, nzv == "FALSE")
used_feat
dim(used_feat)
data <- p
nzv <- nearZeroVar(data, saveMetrics = TRUE)
used_feat <- subset(nzv, nzv == "FALSE")
data <- subset(data, select = rownames(used_feat))
dim(data)
nzv
?nearZeroVar
dim(data)
View(data)
data <- data[ , colSums(is.na(data)) == 0]
dim(data)
view(data)
View(data)
data
p <- data
TestIndex <- createDataPartition(y = data$classe, p = 0.3, list = FALSE)
training <- data[-TestIndex,] # 70% of data to be used as training
testing <- data[TestIndex, ] # 30% of data to be used as testing
set.seed(1000)
TestIndex <- createDataPartition(y = data$classe, p = 0.3, list = FALSE)
training <- data[-TestIndex,] # 70% of data to be used as training
testing <- data[TestIndex, ] # 30% of data to be used as testing
model <- train(classe ~ ., data = training, method = "rpart")
fancyRpartPlot(model$finalModel)
library(rpart)
library(rpart.plot)
library(rattle)
fancyRpartPlot(model$finalModel)
model$finalModel
pred <- predict(model, newdata = testing)
pred
confusionMatrix(pred, testing$classe)
dim(training)
dim(testing)
model <- train(classe ~ ., data = training, method = "tree")
?train
model <- train(classe ~ ., data = training, method = "rf")
model_tree <- rpart(classe ~ ., data = training, method = "class")
pred_tree <- predict(model, newdata = testing, type = "class")
confusionMatrix(pred_tree, testing$classe)
pred_tree <- predict(model_tree, newdata = testing, type = "class")
confusionMatrix(pred_tree, testing$classe)
model_rf <- randomForest(classe ~ ., data = training, method = "class")
model_rf <- randomForest(classe ~ ., data = training, method = "class")
pred_rf <- predict(model_rf, newdata = testing, type = "class")
confusionMatrix(pred_rf, testing$classe)
raw_test <- read.csv("pml_testing", header = TRUE, na.string = c("", "NA", "NULL"))
dim(raw_test)
raw_test <- read.csv("pml_testing.csv", header = TRUE, na.string = c("", "NA", "NULL"))
dim(raw_test)
raw_test <- read.csv("pml-testing.csv", header = TRUE, na.string = c("", "NA", "NULL"))
dim(raw_test)
pred_rf <- predict(model_rf, newdata = raw_test, type = "class")
pred_rf
predict <- predict(model_rf, newdata = raw_test, type = "class")
predict
model_tree <- rpart(classe ~ ., data = training, method = "class")
library(caret)
setwd("D:/login de rede/Meus documentos/_Celso Takeuchi/__DataScience/Data Science Specializaiton/8 - Practical Machine Learning/Assignment")
data <- read.csv("pml-training.csv", header = TRUE, na.strings = c("", "NA", "NULL"))
dim(data)
raw_test <- read.csv("pml-testing.csv", header = TRUE, na.string = c("", "NA", "NULL"))
dim(raw_test)
not_used <- c ("X",
"user_name",
"raw_timestamp_part_1",
"raw_timestamp_part_2",
"cvtd_timestamp",
"new_window",
"num_window")
data <- data[ , -which(names(data) %in% not_used)]
rm(not_used)
nzv <- nearZeroVar(data, saveMetrics = TRUE)
used_feat <- subset(nzv, nzv == "FALSE")
data <- subset(data, select = rownames(used_feat))
dim(data)
data <- data[ , colSums(is.na(data)) == 0]
dim(data)
set.seed(1000)
TestIndex <- createDataPartition(y = data$classe, p = 0.3, list = FALSE)
training <- data[-TestIndex,] # 70% of data to be used as training
testing <- data[TestIndex, ] # 30% of data to be used as testing
model_tree <- rpart(classe ~ ., data = training, method = "class")
pred_tree <- predict(model_tree, newdata = testing, type = "class")
confusionMatrix(pred_tree, testing$classe)
fancyRpartPlot(model_tree$finalModel)
model_tree <- rpart(classe ~ ., data = training)
pred_tree <- predict(model_tree, newdata = testing)
confusionMatrix(pred_tree, testing$classe)
model_tree <- rpart(classe ~ ., data = training, method = "class")
pred_tree <- predict(model_tree, newdata = testing, type = "class")
confusionMatrix(pred_tree, testing$classe)
model_tree
fancyRpartPlot(model_tree  )
model_rf <- randomForest(classe ~ ., data = training, method = "class")
pred_rf <- predict(model_rf, newdata = testing, type = "class")
confusionMatrix(pred_rf, testing$classe)
model_rf <- randomForest(classe ~ ., data = training, method = "class")
rm(nzv)
rm(used_feat)
rm(nzv)
rm(used_feat)
model_rf <- randomForest(classe ~ ., data = training, method = "class")
model_rf <- randomForest(classe ~ ., data = training)
