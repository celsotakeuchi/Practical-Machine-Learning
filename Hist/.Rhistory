# to the code from the previous exercise to get
# started.
# Adjust the bin width and transform the scale
# of the x-axis using log10.
# Submit your final code when you are ready.
# ENTER YOUR CODE BELOW THIS LINE.
# ===========================================================================
qplot(data = diamonds, x = diamonds$price, binwidth = 50) +
facet_wrap(~ cut, ncol = 3, scales = "free")
qplot(data = diamonds, scale_x_log(x = diamonds$price), binwidth = 50) +
facet_wrap(~ cut, ncol = 3, scales = "free")
qplot(data = diamonds, scale_x_log10(x = diamonds$price), binwidth = 50) +
facet_wrap(~ cut, ncol = 3, scales = "free")
qplot(data = diamonds, x = diamonds$price, binwidth = 50) +
facet_wrap(~ cut, ncol = 3, scale_x_log10() = "free")
qplot(data = diamonds, x = diamonds$price, binwidth = 50) +
facet_wrap(~ cut, ncol = 3, scale_x_log10())
qplot(data = diamonds, x = diamonds$price, binwidth = 50) +
facet_wrap(~ cut, ncol = 3, scale_x_log10())
names(diamonds)
levels(caract)
levels(carat)
diamonds$carat
?qplot
qplot(data = diamonds, x = diamonds$price, y = diamonds$carat)
qplot(data = diamonds, x = diamonds$price, y = diamonds$carat) + facet_wrap(~ cut, ncol = 3, scales = "free")
qplot(data = diamonds, scale_x_log10 = diamonds$price, y = diamonds$carat) + facet_wrap(~ cut, ncol = 3, scales = "free")
qplot(data = diamonds, x = scale_x_log10(diamonds$price), y = diamonds$carat) + facet_wrap(~ cut, ncol = 3, scales = "free")
qplot(data = diamonds, x = diamonds$price, diamonds$carat) +
facet_wrap(~ cut, ncol = 3, scales = "free") +
scale_x_log10()
qplot(data = diamonds, x = diamonds$price, diamonds$carat) +
facet_wrap(~ cut, ncol = 3, scales = "free") +
scale_x_log10()
qplot(data = diamonds, x = diamonds$price, diamonds$carat) +
facet_wrap(~ cut, ncol = 3, scales = "free")
qplot(data = diamonds, x = diamonds$price, diamonds$carat) +
facet_wrap(~ cut, ncol = 3, scales = "free") +
scale_x_log10()
?boxplots
qplot(data = diamonds, x = diamonds$price) +
facet_wrap(~ cut, nol = 3)
qplot(data = diamonds, x = diamonds$price) +
facet_wrap(~ cut, ncol = 3)
qplot(data = diamonds, x = diamonds$price) +
facet_wrap(~ clarity, ncol = 3)
qplot(data = diamonds, x = diamonds$price) +
facet_wrap(~ color, ncol = 3)
qplot(data = diamonds, x = diamonds$price, y = diamonds$color) +
facet_wrap(~ color, ncol = 3)
qplot(data = diamonds, x = diamonds$price, y = diamonds$cut) +
facet_wrap(~ color, ncol = 3)
qplot(data = diamonds, x = diamonds$price, y = diamonds$clarity) +
facet_wrap(~ color, ncol = 3)
levels(diamonds$color)
color.d <- subset(diamonds, diamonds$color == "D", subset = c(price))
color.d <- subset(diamonds, diamonds$color == "D", select = c(price))
color.e <- subset(diamonds, diamonds$color == "E", select = c(price))
color.f <- subset(diamonds, diamonds$color == "F", select = c(price))
color.g <- subset(diamonds, diamonds$color == "G", select = c(price))
color.h <- subset(diamonds, diamonds$color == "H", select = c(price))
color.i <- subset(diamonds, diamonds$color == "I", select = c(price))
color.J <- subset(diamonds, diamonds$color == "J", select = c(price))
summary(color.d)
summary(color.e)
summary(color.f)
summary(color.g)
summary(color.h)
summary(color.i)
summary(color.j)
summary(color.j)
summary(color.J)
color.j <- color.J
rm(color.J)
iqr
?iqr
install.packages("stats")
install.packages("stats")
library(stats)
iqr(color.d$price)
IQR(color.d$price)
IQR(color.e$price)
IQR(color.f$price)
IQR(color.g$price)
IQR(color.h$price)
IQR(color.i$price)
IQR(color.j$price)
boxplots
boxplot
?boxplot
# Investigate the price per carat of diamonds across
# the different colors of diamonds using boxplots.
# Go to the discussions to
# share your thoughts and to discover
# what other people found.
# You can save images by using the ggsave() command.
# ggsave() will save the last plot created.
# For example...
#                  qplot(x = price, data = diamonds)
#                  ggsave('priceHistogram.png')
# ggsave currently recognises the extensions eps/ps, tex (pictex),
# pdf, jpeg, tiff, png, bmp, svg and wmf (windows only).
# Copy and paste all of the code that you used for
# your investigation, and submit it when you are ready.
# Investigate the price per carat of diamonds across
# the different colors of diamonds using boxplots.
# Go to the discussions to
# share your thoughts and to discover
# what other people found.
# You can save images by using the ggsave() command.
# ggsave() will save the last plot created.
# For example...
#                  qplot(x = price, data = diamonds)
#                  ggsave('priceHistogram.png')
# ggsave currently recognises the extensions eps/ps, tex (pictex),
# pdf, jpeg, tiff, png, bmp, svg and wmf (windows only).
# Copy and paste all of the code that you used for
# your investigation, and submit it when you are ready?
?boxplot
boxplot(color.d)
getwd()
View(diamonds)
swirl
library(swirl)
swirl()
install_from_swirl("Exploratory Data Analysis")
library(swirl)
swirl()
abline(h = 12)
q
quit()
pwd
exit()
quit()
x <- c(0.18, -1.54, 0.42, 0.95)
w <- c(2, 1, 3, 1)
rbind(x,y)
y <- rbind(x,w)
y
sd(x)
coef(lm(x~w))
mean(y)
2*0,18
2*0.18
-1.54*1
0.42*3
0.95*1
0.36-1.54+1.26+0.95
1.03*1.03
mean(x)
mean(w)
k <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
mean(k)
a <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
b <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
library(ggplot2)
qplot(a,b)
lm(a~b)
lm(b~a)
lm?
;
?lm
data(mtcars)
List(mtcars)
names(metcars)
names(mtcars)
lm(mtcars$mpg ~ mtcars$wt)
install.package("UsingR")
install.packages("UsingR")
q <- c(8.58, 10.46, 9.01, 9.64, 8.86)
mean(q)
sd(q)
8,58-9,31
8.58-9.31
-0,73/0.7511
-0.73/0.7511
0.4*1.5
x <- c(0.18, -1.54, 0.42, 0.95)
mean(x)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
mean(x)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
lm(y~x)
quit()
swirl
library(swirl)
swirl()
install_from_swirl("Regression Models")
install_from_swirl("Regression Models")
install_from_swirl("Regression Models")
install_from_swirl("Regression Models")
?InstallCourses
?install_course_github
?InstallCourses
install_from_swirl("Statistical Inference")
install_from_swirl("Statistical Inference")
install_from_swirl("Regression Models")
swirl()
swirl()
1-(2+1)/36
deck
1/52
52
4/52
0
12/52
2/51
exit
quit()
x <- c(1,2,3,4,5,6)
x
mean(x)
var(x)
variance(x)
?var
var(x)
swirl
swirl()
swirl()
library(swirl)
swirl()
quit()
x <- c(0.18, -1.54, 0.42, 0.95)
w <- c(2, 1, 3, 1)
rbind(x,w)
suits
values
deal
deck
hand
swirl()
library(swirl)
swirl
swirl()
swirl()
2
swirl()
library(swirl)
swirl()
swirl()
ppois(10, lambda= 5*3)
choose(5,4)
0,5^5
0.5^5
*6
6*0.5^5
swirl()
6
0,6
1.6*0.8/2
0,64
0.64
mypdf
integrate
integrate(mypdf,0,1.6)
o
p
09
x
334
2
1
34
5
6
7
7
234
42432424
3254
42432
35
4645
5
756
453
443
234
35
4
23
123
1
info()
1
1
12
12
23123
234
3447
56876
8
632
21534
543
4324
32
32
4332
432
423
443
242
2
323
243
2432
43434345
435
4
65
42
32
321
422
q
2
1,4
1.4
x^2=4*o.5
x^2=4*0.5
q
quit()
library(downloader)
install.packages("downloader")
library(downloader)
url <- "https://raw.githubusercontent.com/genomicsclass/dagdata/master/inst/extdata/femaleControlsPopulation.csv"
filename <- basename(url)
download(url, destfile=filename)
x <- unlist( read.csv(filename) )
x
dim(x)
x
mean(x)
set.seed(1)
mean(sample(x, 5))
mean(sample(x, 5))
set.seed(1)
mean(sample(x, 5))
mean(sample(x, 5)) - mean(x)
set.seed(5)
mean(sample(x, 5)) - mean(x)
set.seed(1)
mean(sample(x, 5)) - mean(x)
set.seed(5)
mean(sample(x, 5)) - mean(x)
quit()
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
library(lattice)
?segmentationOriginal
names(filename)
names(segmentationOriginal)
str(segmentationOriginal$Case)
train
train <- subset(segmentationOriginal, Case == "1")
names(train)
names(segmentationOriginal)
head(train)
head(train)
train
train <- subset(segmentationOriginal, Case == "1", select = "")
?subset
train <- subset(segmentationOriginal, Case == "1", select = -Case)
train <- subset(segmentationOriginal, Case == 1, select = -Case)
View(segmentationOriginal)
train <- subset(segmentationOriginal, Case == "Train")
View(train)
set.seed(125)
model <- train(Class ~ ., data = train, method = "rpart")
model$finalModel
model
library(rpart)
set.seed(125)
model <- train(Class ~ ., data = train, method = "rpart")
model$finalModel
install.packages(rpart)
install.packages("rpart")
install.packages("rpart")
library(rpart)
library('rpart')
install.packages("rpart")
library(rpart)
set.seed(125)
model <- train(Class ~ ., data = train, method = "rpart")
train <- subset(segmentationOriginal, Case == "Train")
test <- subset(segmentationOriginal, Case == "Test")
set.seed(125)
model <- train(Class ~ ., data = train, method = "rpart")
library(caret)
train <- subset(segmentationOriginal, Case == "Train")
test <- subset(segmentationOriginal, Case == "Test")
set.seed(125)
model <- train(Class ~ ., data = train, method = "rpart")
train <- subset(segmentationOriginal, Case == "Train")
test <- subset(segmentationOriginal, Case == "Test")
set.seed(125)
model <- train(Class ~ ., data = train, method = "rpart")
install.packages("e1071")
library(e1071)
train <- subset(segmentationOriginal, Case == "Train")
test <- subset(segmentationOriginal, Case == "Test")
set.seed(125)
model <- train(Class ~ ., data = train, method = "rpart")
model
model$finalModel
plot(model$finalModel, uniform = TUE)
plot(model$finalModel, uniform = TRUE
)
text(model$finalModel, cex = 0.8)
predict(model, newdata = test)
library(pgmm)
data(olive)
olive = olive[,-1]
install.packages(pgmm)
install.packages("pgmm')
install.packages("pgmm")
data(olive)
library(pgmm)
a <- data(olive)
a = olive[, -1]
a
names(a)
summary(a)
str(a)
new.data <- as.data.frame(t(colMeans(olive)))
new.data
new.data <- as.data.frame(t(colMeans(olive)))
new.data <- as.data.frame(t(colMeans(olive)))
model.olive <- train(Area ~ . , method = "rpart", data = olive)
model.olive$finalModel
pred.olive <- predict(model.olive, data = new.data)
pred.olive
str(pred.olive)
plot(model.olive$finalModel, uniform = TRUE)
text(model.olive$finalModel, cex = 1)
str(olive)
pred.olive <- predict(model.olive, data = new.data)
pred.olive
install.library(ElemStatLearn)
install.packages("ElemStatLearn")
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
names(train)
names(SAheart)
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
set.seed(13234)
model.4 <- train(chd ~ age + alcohol + obesity + tobacco + typea + ldl,
method = "glm", family = "binomial")
pred.4 <- predict(model.4, missClass)
missClass(testSA$chd, predict(modelSA, newdata = testSA))
missClass(trainSA$chd, predict(modelSA, newdata = trainSA))
model.4 <- train(chd ~ age + alcohol + obesity + tobacco + typea + ldl,
method = "glm", family = "binomial", data = SAheart)
missClass(testSA$chd, predict(model.4, newdata = testSA))
missClass(trainSA$chd, predict(model.4, newdata = trainSA))
set.seed(13234)
model.4 <- train(chd ~ age + alcohol + obesity + tobacco + typea + ldl,
method = "glm", family = "binomial", data = SAheart)
missClass(testSA$chd, predict(model.4, newdata = testSA))
missClass(trainSA$chd, predict(model.4, newdata = trainSA))
set.seed(13234)
model.4 <- train(chd ~ age + alcohol + obesity + tobacco + typea + ldl,
method = "glm", family = "binomial", data = trainSA)
missClass(testSA$chd, predict(model.4, newdata = testSA))
missClass(trainSA$chd, predict(model.4, newdata = trainSA))
quit()
## Setting up the environment
library(caret)
library(rpart)
library(rpart.plot)
library(rattle)
setwd("D:/login de rede/Meus documentos/_Celso Takeuchi/__DataScience/Data Science Specializaiton/8 - Practical Machine Learning/Assignment")
data <- read.csv("pml-training.csv", header = TRUE, na.strings = c("", "NA", "NULL"))
not_used <- c ("X",
"user_name",
"raw_timestamp_part_1",
"raw_timestamp_part_2",
"cvtd_timestamp",
"new_window",
"num_window")
data <- data[ , -which(names(data) %in% not_used)]
nzv <- nearZeroVar(data, saveMetrics = TRUE)
used_feat <- subset(nzv, nzv == "FALSE")
data <- subset(data, select = rownames(used_feat))
data <- data[ , colSums(is.na(data)) == 0]
rm(nzv)
rm(used_feat)
set.seed(1000)
TestIndex <- createDataPartition(y = data$classe, p = 0.3, list = FALSE)
training <- data[-TestIndex,] # 70% of data to be used as training
testing <- data[TestIndex, ] # 30% of data to be used as testing
model_rf <- randomForest(classe ~ ., data = training, method = "class")
library(caret)
library(rpart)
library(rpart.plot)
library(rattle)
model_rf <- randomForest(classe ~ ., data = training, method = "class")
?randomForest
library(randomForest)
model_rf <- randomForest(classe ~ ., data = training, method = "class")
fancyRpartPlot(pred_rf)
fancyRpartPlot(model_rf)
fancyRpartPlot(model_rf)
model_rf
